#+TITLE:
(add-hook 'find-file-hook (lambda () (set-buffer-file-coding-system 'unix)))

 Doom Emacs Config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: showeverything
#+auto_tangle: t
#+AUTHOR: Matt Roman

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#font-configuration][Font Configuration]]
- [[#emacs-line-numbers][Emacs Line Numbers]]
- [[#project-configuration][Project configuration]]
- [[#org-and-org-roam-configuration][Org and Org-roam configuration]]
- [[#org-auto-tangle][Org Auto Tangle]]
- [[#github-copilot-configuration][Github Copilot configuration]]
- [[#initial-window-size][Initial Window Size]]
- [[#handle-file-system-coding][Handle file system coding]]

* About This Config

$DOOMDIR/config.el -*- lexical-binding: t; -*-

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

 `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how

* Font Configuration

Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+BEGIN_SRC elisp

(setq doom-theme 'doom-solarized-light
      doom-font (font-spec :famly "Victor Mono" :size 16 )
      doom-big-font (font-spec :family "Victor Mono" :size 24))

#+END_SRC

* Emacs Line Numbers

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC elisp

(setq display-line-numbers-type t)

#+END_SRC

* Project configuration

Set the projectile search path. This allows projectile to automatically search
for projects in the specified path.
Add elixir project configuration.

#+BEGIN_SRC elisp

(setq
 projectile-project-search-path '("~/Workspace/"))


#+END_SRC

* Org and Org-roam configuration

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+BEGIN_SRC elisp

(after! org

  (add-hook 'org-after-refile-insert-hook #'org-save-all-org-buffers)

  (setq org-log-done 'time)

  (setq org-agenda-block-separator 8411)

  (setq org-agenda-hide-tags-regexp ".*")



;; Custom styles for dates in agenda
(custom-set-faces!
  '(org-agenda-date :inherit outline-1 :height 1.15)
  '(org-agenda-date-today :inherit outline-2 :height 1.15)
  '(org-agenda-date-weekend :inherit outline-1 :height 1.15)
  '(org-agenda-date-weekend-today :inherit outline-2 :height 1.15)
  '(org-super-agenda-header :inherit custom-button :weight bold :height 1.05)
  `(link :foreground unspecified :underline nil :background ,(nth 1 (nth 7 doom-themes--colors)))
  '(org-link :foreground unspecified))

  ;; Enable org-modern mode for Org buffers
  (use-package! org-modern
    :hook
    (org-mode . org-modern-mode)
    :config
    ;; Optional: Customize appearance
    (setq org-modern-star ["◉" "○" "●" "◆" "▶"]
          org-modern-list '((?- . "•") (?+ . "‣") (?* . "◦"))
          org-modern-priority '((?A . "[A]") (?B . "[B]") (?C . "[C]"))
          org-modern-todo-faces
          '(("TODO" . "red")
            ("DONE" . "green")
            ("IN-PROGRESS" . "yellow"))))

  (setq org-agenda-category-icon-alist
      `(
        ("home" ,(list (all-the-icons-faicon "home" :height 0.9 :v-adjust 0.005)) nil nil :ascent center)
        ("work" ,(list (all-the-icons-faicon "building" :height 0.9 :v-adjust 0.005)) nil nil :ascent center)
        ("computer" ,(list (all-the-icons-faicon "laptop" :v-adjust 0.01)) nil nil :ascent center)
        ("errands" ,(list (all-the-icons-faicon "car" :height 0.9 :v-adjust 0.005)) nil nil :ascent center)
        ("phone" ,(list (all-the-icons-faicon "phone" :height 0.9 :v-adjust 0.005)) nil nil :ascent center)
   ))


  (setq org-agenda-prefix-format '(
 (agenda . "  %?-2i %s %t")
 (todo . " %?-3i  ")
 (tags . " %i %-12:c")
 (search . " %i %-12:c")))

;; Optional: Enable for agenda
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

  (setq org-agenda-files
      '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org"
        "~/Library/Mobile Documents/com~apple~CloudDocs/org/someday.org"
        "~/Library/Mobile Documents/com~apple~CloudDocs/org/projects.org"))

  (setq org-refile-targets
      '(("~/Library/Mobile Documents/com~apple~CloudDocs/org/projects.org" :maxlevel . 2)  ;; Refile to headings up to level 2 in projects.org
        ("~/Library/Mobile Documents/com~apple~CloudDocs/org/someday.org" :maxlevel . 2)
        ("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org" :level . 1)
        ("~/Library/Mobile Documents/com~apple~CloudDocs/org/inbox.org" :level . 1)))    ;; Refile to level 1 headings in someday.org

(setq org-capture-templates
      '(("t" "Todo" entry
         (file+headline "~/Library/Mobile Documents/com~apple~CloudDocs/org/inbox.org" "Tasks")
         "* TODO %?\n  %i\n  %a")

        ("o" "One-on-One Meeting Topic" entry
         (file+headline "~/Library/Mobile Documents/com~apple~CloudDocs/org/one-on-ones.org" "Topics")
         "* [ ] %?\n  %i\n  Added: %U")

        ("p" "Project" entry
         (file+headline "~/Library/Mobile Documents/com~apple~CloudDocs/org/projects.org" "Active Projects")
         "* %? :project:\n  %i\n  Created: %U")))

  (setq org-agenda-custom-commands
      '(("i" "Inbox"
         todo ""
         ((org-agenda-files
           '("~/Library/Mobile Documents/com~apple~CloudDocs/org/inbox.org"))
          (org-agenda-overriding-header "Inbox Items")))

        ("n" "Next Items"
         todo ""
         ((org-agenda-files
           '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org"))
          (org-agenda-overriding-header "Next Actions")))

        ("W" "Next @work"
         ((agenda ""
                  ((org-agenda-span 'week)
                   (org-agenda-overriding-header "Weekly Agenda")))

         (tags-todo "@work"
         ((org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org"))
          (org-agenda-override-header "Next Actions @Work")))))

        ("d" "Daily Agenda"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org")
                      (org-agenda-override-header "Next Actions @Work")
                      (org-deadline-warning-days 7))))
          (todo ""
                     ((org-agenda-overriding-header "Tasks Without Due or Scheduled Dates")
                      (org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org")
                  agenda-sorting-strategy '(priority-down)
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'scheduled 'deadline)))))))

        ("w" "Weekly Agenda"
         ((agenda "" ((org-agenda-span 'week)
                      (org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org")
                (org-agenda-override-header "Next Actions @Work")
                      (org-deadline-warning-days 7))))
          (todo ""
                     ((org-agenda-overriding-header "Tasks Without Due or Scheduled Dates")
                      (org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/next.org")
                      (org-agenda-sorting-strategy '(priority-down)
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'scheduled 'deadline))))))))

        ("o" "One-on-Ones"
         ((tags-todo ""
                     ((org-agenda-files
                       '("~/Library/Mobile Documents/com~apple~CloudDocs/org/one-on-ones.org"))
                      (org-agenda-overriding-header "Open Topics")
                      ))

          (tags ""
                ((org-agenda-files
                  '("~/Library/Mobile Documents/com~apple~CloudDocs/org/one-on-ones.org"))
                 (org-agenda-overriding-header "Completed Topics")
                 (org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'notregexp "\\[X\\]"))
                 ))))


        ("p" "Planning"
         ((todo ""
         ((org-agenda-files
           '("~/Library/Mobile Documents/com~apple~CloudDocs/org/projects.org"))
          (org-agenda-overriding-header "Projects")))
         (todo ""
         ((org-agenda-files
           '("~/Library/Mobile Documents/com~apple~CloudDocs/org/someday.org"))
          (org-agenda-overriding-header "Someday")))
    (tags-todo "-{.*}"
                     ((org-agenda-overriding-header "Untagged Tasks")))
    (todo "" ((org-agenda-files '("~/Library/Mobile Documents/com~apple~CloudDocs/org/inbox.org"))
                      (org-agenda-overriding-header "Unprocessed Inbox Items")))))

        ("s" "Someday"
         todo ""
         ((org-agenda-files
           '("~/Library/Mobile Documents/com~apple~CloudDocs/org/someday.org"))
          (org-agenda-overriding-header "Someday Maybe")))))

)

(after! org-roam
  (setq org-roam-directory (file-truename "~/Library/Mobile Documents/com~apple~CloudDocs/.hidden/roamnotes"))

  (setq org-roam-dailies-directory (file-truename "~/Library/Mobile Documents/com~apple~CloudDocs/.hidden/daily"))

  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))

    ;; Define the capture templates
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("p" "project" plain
           "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Notes\n\n"
           :if-new (file+head "projects/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: Projects\n")
           :unnarrowed t)
          ("o" "opportunity" plain
           "* Challenge\n\n%?\n\n* Proposal\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Notes\n\n"
           :if-new (file+head "opportunites/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: Opportunities\n")
           :unnarrowed t)
          ("m" "meeting" plain
           "* Meeting\n\n%?\n\n* Description\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Notes\n\n"
           :if-new (file+head "meeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: Meetings\n")
           :unnarrowed t)
          ("r" "reference" plain
           "* ${title}\n\n%?"
           :if-new (file+head "references/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* Today's Items\n\n** TODO %?\n\n* Today's Notes\n\n**\n"
         :if-new (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
  (map! :leader
        :prefix "n"
        :desc "Toggle Org-roam buffer" "l" #'org-roam-buffer-toggle
        :desc "Find Org-roam node" "f" #'org-roam-node-find
        :desc "Show Org-roam graph" "g" #'org-roam-graph
        :desc "Insert Org-roam node" "i" #'org-roam-node-insert
        :desc "Capture a project note" "p" (lambda () (interactive) (org-roam-capture nil "p"))
        :desc "Capture an opportunity note" "o" (lambda () (interactive) (org-roam-capture nil "o"))
        :desc "Capture to Org-roam" "c" #'org-roam-capture
        :desc "Capture today's daily note" "j" #'org-roam-dailies-capture-today)

  (org-roam-db-autosync-mode))

#+END_SRC

#+RESULTS:
: t

* Org Auto Tangle

Configure plugin to automatically tangle org files when saved

#+BEGIN_SRC elisp

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

#+END_SRC

* Github Copilot configuration

Accept completion from copilot and fallback to company

#+BEGIN_SRC elisp

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))

#+END_SRC

* Initial Window Size

Set the initial window size for emacs

#+BEGIN_SRC elisp
;; Set the initial frame size and position
(setq initial-frame-alist
      '((width . 140)  ;; Width in characters
        (height . 48)  ;; Height in characters
        (left . 50)    ;; Distance from left edge of the screen in pixels
        (top . 50)))   ;; Distance from top edge of the screen in pixels

;; Set the default frame size and position for new frames
(setq default-frame-alist
      '((width . 140)
        (height . 48)
        (left . 50)
        (top . 50)))

#+END_SRC

* Handle file system coding

#+BEGIN_SRC elisp
#+END_SRC
